using Bb.Galileo.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.ComponentModel;

namespace Bb.Galileo.Files.Schemas
{

    public class RestrictionDefinition : IBase
    {

        [Description("functional key")]
        [JsonRequired]
        public string Name { get; set; }


        [JsonRequired]
        public RestrictionKindEnum Kind { get; set; }


        [Description("Description of the currentitem")]
        public string Description { get; set; }

        [Description("the message that you want to shown if the evaluation failed")]
        public string ErrorMessage { get; set; }

        [JsonIgnore]
        public FileModel File { get; internal set; }


        [JsonIgnore]
        public bool AutoGenerated { get; internal set; }

        public JToken Value { get; internal set; }

        [JsonIgnore]
        public RestrictionRule Rule { get; internal set; }

        public override string ToString()
        {
            return Name.ToString();
        }

        internal RestrictionDefinition SetRule()
        {

            switch (this.Kind)
            {
                case RestrictionKindEnum.TypeRestriction:
                    this.Rule = new TypeRestrictionRule(this);
                    break;

                default:
                    throw new NotImplementedException(this.Kind.ToString());
            }

            return this;

        }


        //public ResolveQuery GetReference() => new ResolveQuery(this);

    }

}
