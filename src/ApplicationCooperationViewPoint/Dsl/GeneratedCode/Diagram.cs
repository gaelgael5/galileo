//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "Bb.ApplicationCooperationViewPoint.CooperationViewPointDiagram")]

namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainClass CooperationViewPointDiagram
	/// Description for
	/// Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.CooperationViewPointDiagram.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.CooperationViewPointDiagram.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ca3f1951-3a94-4564-a805-02e3bfc91b8b")]
	public partial class CooperationViewPointDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::Bb.ApplicationCooperationViewPoint.ModelElement)
			{
				global::Bb.ApplicationCooperationViewPoint.CooperationShape newShape = new global::Bb.ApplicationCooperationViewPoint.CooperationShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Bb.ApplicationCooperationViewPoint.SubElement)
			{
				global::Bb.ApplicationCooperationViewPoint.CooperationSubShape newShape = new global::Bb.ApplicationCooperationViewPoint.CooperationSubShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Bb.ApplicationCooperationViewPoint.ConceptElement)
			{
				global::Bb.ApplicationCooperationViewPoint.ConceptElementShape newShape = new global::Bb.ApplicationCooperationViewPoint.ConceptElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Bb.ApplicationCooperationViewPoint.ConceptSubElement)
			{
				global::Bb.ApplicationCooperationViewPoint.ConceptSubElementShape newShape = new global::Bb.ApplicationCooperationViewPoint.ConceptSubElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Bb.ApplicationCooperationViewPoint.Concept)
			{
				global::Bb.ApplicationCooperationViewPoint.ConceptShape newShape = new global::Bb.ApplicationCooperationViewPoint.ConceptShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Bb.ApplicationCooperationViewPoint.Relationship)
			{
				global::Bb.ApplicationCooperationViewPoint.RelationshipShape newShape = new global::Bb.ApplicationCooperationViewPoint.RelationshipShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::Bb.ApplicationCooperationViewPoint.CooperationShape.DecoratorsInitialized += CooperationShapeDecoratorMap.OnDecoratorsInitialized;
			global::Bb.ApplicationCooperationViewPoint.CooperationSubShape.DecoratorsInitialized += CooperationSubShapeDecoratorMap.OnDecoratorsInitialized;
			global::Bb.ApplicationCooperationViewPoint.ConceptSubElementShape.DecoratorsInitialized += ConceptSubElementShapeDecoratorMap.OnDecoratorsInitialized;
			global::Bb.ApplicationCooperationViewPoint.ConceptShape.DecoratorsInitialized += ConceptShapeDecoratorMap.OnDecoratorsInitialized;
			global::Bb.ApplicationCooperationViewPoint.RelationshipShape.DecoratorsInitialized += RelationshipShapeDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CooperationShape.
		/// </summary>
		internal static partial class CooperationShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CooperationShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Bb.ApplicationCooperationViewPoint.ModelElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Bb.ApplicationCooperationViewPoint.ModelElement.TypeDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TypeDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CooperationSubShape.
		/// </summary>
		internal static partial class CooperationSubShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CooperationSubShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Bb.ApplicationCooperationViewPoint.SubElement.TypeDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TypeDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Bb.ApplicationCooperationViewPoint.SubElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ConceptSubElementShape.
		/// </summary>
		internal static partial class ConceptSubElementShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ConceptSubElementShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Bb.ApplicationCooperationViewPoint.ConceptSubElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Bb.ApplicationCooperationViewPoint.ConceptSubElement.TypeDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TypeDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ConceptShape.
		/// </summary>
		internal static partial class ConceptShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ConceptShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Bb.ApplicationCooperationViewPoint.Concept.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for RelationshipShape.
		/// </summary>
		internal static partial class RelationshipShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for RelationshipShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Bb.ApplicationCooperationViewPoint.Relationship.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Bb.ApplicationCooperationViewPoint.Relationship.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// CooperationViewPointDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xca3f1951, 0x3a94, 0x4564, 0xa8, 0x05, 0x02, 0xe3, 0xbf, 0xc9, 0x1b, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CooperationViewPointDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CooperationViewPointDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Bb.ApplicationCooperationViewPoint.ModelElement), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Bb.ApplicationCooperationViewPoint.SubElement), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Bb.ApplicationCooperationViewPoint.ConceptElement), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Bb.ApplicationCooperationViewPoint.ConceptSubElement), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Bb.ApplicationCooperationViewPoint.Concept), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Bb.ApplicationCooperationViewPoint.Relationship), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is global::Bb.ApplicationCooperationViewPoint.ModelElement)
				{
					parentElement = GetParentForModelElement((global::Bb.ApplicationCooperationViewPoint.ModelElement)childElement);
				} else
				if(childElement is global::Bb.ApplicationCooperationViewPoint.SubElement)
				{
					parentElement = GetParentForSubElement((global::Bb.ApplicationCooperationViewPoint.SubElement)childElement);
				} else
				if(childElement is global::Bb.ApplicationCooperationViewPoint.ConceptElement)
				{
					parentElement = GetParentForConceptElement((global::Bb.ApplicationCooperationViewPoint.ConceptElement)childElement);
				} else
				if(childElement is global::Bb.ApplicationCooperationViewPoint.ConceptSubElement)
				{
					parentElement = GetParentForConceptSubElement((global::Bb.ApplicationCooperationViewPoint.ConceptSubElement)childElement);
				} else
				if(childElement is global::Bb.ApplicationCooperationViewPoint.Concept)
				{
					parentElement = GetParentForConcept((global::Bb.ApplicationCooperationViewPoint.Concept)childElement);
				} else
				if(childElement is global::Bb.ApplicationCooperationViewPoint.Relationship)
				{
					parentElement = GetParentForRelationship((global::Bb.ApplicationCooperationViewPoint.Relationship)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::Bb.ApplicationCooperationViewPoint.Model GetParentForModelElement( global::Bb.ApplicationCooperationViewPoint.ModelElement root )
			{
				// Segments 0 and 1
				global::Bb.ApplicationCooperationViewPoint.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Bb.ApplicationCooperationViewPoint.Model GetParentForSubElement( global::Bb.ApplicationCooperationViewPoint.SubElement root )
			{
				// Segments 0 and 1
				global::Bb.ApplicationCooperationViewPoint.ModelElement root2 = root.Children;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Bb.ApplicationCooperationViewPoint.Model result = root2.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Bb.ApplicationCooperationViewPoint.Model GetParentForConceptElement( global::Bb.ApplicationCooperationViewPoint.ConceptElement root )
			{
				// Segments 0 and 1
				global::Bb.ApplicationCooperationViewPoint.Concept root2 = root.Concept;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Bb.ApplicationCooperationViewPoint.Model result = root2.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Bb.ApplicationCooperationViewPoint.Model GetParentForConceptSubElement( global::Bb.ApplicationCooperationViewPoint.ConceptSubElement root )
			{
				// Segments 0 and 1
				global::Bb.ApplicationCooperationViewPoint.ConceptElement root2 = root.ConceptElement;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Bb.ApplicationCooperationViewPoint.Concept root4 = root2.Concept;
				if ( root4 == null ) return null;
				// Segments 4 and 5
				global::Bb.ApplicationCooperationViewPoint.Model result = root4.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Bb.ApplicationCooperationViewPoint.Model GetParentForConcept( global::Bb.ApplicationCooperationViewPoint.Concept root )
			{
				// Segments 0 and 1
				global::Bb.ApplicationCooperationViewPoint.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Bb.ApplicationCooperationViewPoint.Model GetParentForRelationship( global::Bb.ApplicationCooperationViewPoint.Relationship root )
			{
				// Segments 0 and 1
				global::Bb.ApplicationCooperationViewPoint.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
		}
		
	
	}
