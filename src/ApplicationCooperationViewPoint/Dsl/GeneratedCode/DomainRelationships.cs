//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship ModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelHasElements.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelHasElements.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a56654a5-67b4-4c46-9617-d126e33ee736")]
	public partial class ModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa56654a5, 0x67b4, 0x4c46, 0x96, 0x17, 0xd1, 0x26, 0xe3, 0x3e, 0xe7, 0x36);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasElements link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">ModelElement to use as the target of the relationship.</param>
		public ModelHasElements(Model source, ModelElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasElements.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x8e1caa2f, 0xc5e8, 0x439c, 0x99, 0x09, 0xd3, 0x3e, 0x8b, 0xc1, 0x3c, 0x8f);
		
		/// <summary>
		/// DomainRole Model
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelHasElements/Model.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelHasElements/Model.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ModelHasElements/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8e1caa2f-c5e8-439c-9909-d33e8bc13c8f")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a ModelElement
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(ModelElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(ModelElement element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x31224c1c, 0xde69, 0x4216, 0xac, 0xdc, 0xa8, 0xa3, 0x47, 0xed, 0x4b, 0xf2);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelHasElements/Element.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelHasElements/Element.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("31224c1c-de69-4216-acdc-a8a347ed4bf2")]
		public virtual ModelElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a Model
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelElement> GetElements(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelElement>, ModelElement>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasElements links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ModelHasElements> GetLinksToElements ( global::Bb.ApplicationCooperationViewPoint.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasElements>(modelInstance, global::Bb.ApplicationCooperationViewPoint.ModelHasElements.ModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ModelHasElements link to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ModelHasElements GetLinkToModel (global::Bb.ApplicationCooperationViewPoint.ModelElement elementInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasElements>(elementInstance, global::Bb.ApplicationCooperationViewPoint.ModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasElements instance accessors
		
		/// <summary>
		/// Get any ModelHasElements links between a given Model and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ModelHasElements> GetLinks( global::Bb.ApplicationCooperationViewPoint.Model source, global::Bb.ApplicationCooperationViewPoint.ModelElement target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ModelHasElements>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasElements>(source, global::Bb.ApplicationCooperationViewPoint.ModelHasElements.ModelDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasElements link between a given Modeland a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ModelHasElements GetLink( global::Bb.ApplicationCooperationViewPoint.Model source, global::Bb.ApplicationCooperationViewPoint.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasElements>(source, global::Bb.ApplicationCooperationViewPoint.ModelHasElements.ModelDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship ModelElementHasChildren
	/// Description de Bb.ApplicationCooperationViewPoint.ModelElementHasChildren
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelElementHasChildren.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelElementHasChildren.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("57c665d5-ef2c-41b6-96bd-08780d51c8e4")]
	public partial class ModelElementHasChildren : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelElementHasChildren domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x57c665d5, 0xef2c, 0x41b6, 0x96, 0xbd, 0x08, 0x78, 0x0d, 0x51, 0xc8, 0xe4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelElementHasChildren link in the same Partition as the given ModelElement
		/// </summary>
		/// <param name="source">ModelElement to use as the source of the relationship.</param>
		/// <param name="target">SubElement to use as the target of the relationship.</param>
		public ModelElementHasChildren(ModelElement source, SubElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelElementHasChildren.ModelElementDomainRoleId, source), new DslModeling::RoleAssignment(ModelElementHasChildren.SubElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelElementHasChildren(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelElementHasChildren(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelElementHasChildren(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelElementHasChildren(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelElement domain role code
		
		/// <summary>
		/// ModelElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelElementDomainRoleId = new global::System.Guid(0x4e27a168, 0x343f, 0x4cf4, 0x80, 0x11, 0x78, 0xbe, 0xe6, 0xfb, 0x63, 0xa9);
		
		/// <summary>
		/// DomainRole ModelElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ModelElementHasChildren.ModelElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelElementHasChildren/ModelElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelElementHasChildren/ModelElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Children", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ModelElementHasChildren/ModelElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4e27a168-343f-4cf4-8011-78bee6fb63a9")]
		public virtual ModelElement ModelElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a SubElement
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelElement GetParent(SubElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubElementDomainRoleId) as ModelElement;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(SubElement element, ModelElement newModelElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubElementDomainRoleId, newModelElement);
		}
		#endregion
		#region SubElement domain role code
		
		/// <summary>
		/// SubElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubElementDomainRoleId = new global::System.Guid(0x705ae0aa, 0x38b5, 0x4591, 0x99, 0x49, 0x68, 0x62, 0xd0, 0xc2, 0x35, 0x5d);
		
		/// <summary>
		/// DomainRole SubElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ModelElementHasChildren.SubElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelElementHasChildren/SubElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelElementHasChildren/SubElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ModelElementHasChildren/SubElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("705ae0aa-38b5-4591-9949-6862d0c2355d")]
		public virtual SubElement SubElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Children of a ModelElement
		/// <summary>
		/// Gets a list of Children.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SubElement> GetChildren(ModelElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SubElement>, SubElement>(element, ModelElementDomainRoleId);
		}
		#endregion
		#region ModelElement link accessor
		/// <summary>
		/// Get the list of ModelElementHasChildren links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren> GetLinksToChildren ( global::Bb.ApplicationCooperationViewPoint.ModelElement modelElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren>(modelElementInstance, global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren.ModelElementDomainRoleId);
		}
		#endregion
		#region SubElement link accessor
		/// <summary>
		/// Get the ModelElementHasChildren link to a SubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren GetLinkToParent (global::Bb.ApplicationCooperationViewPoint.SubElement subElementInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren>(subElementInstance, global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren.SubElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SubElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelElementHasChildren instance accessors
		
		/// <summary>
		/// Get any ModelElementHasChildren links between a given ModelElement and a SubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren> GetLinks( global::Bb.ApplicationCooperationViewPoint.ModelElement source, global::Bb.ApplicationCooperationViewPoint.SubElement target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren>(source, global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren.ModelElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren link in links )
			{
				if ( target.Equals(link.SubElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelElementHasChildren link between a given ModelElementand a SubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren GetLink( global::Bb.ApplicationCooperationViewPoint.ModelElement source, global::Bb.ApplicationCooperationViewPoint.SubElement target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren>(source, global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren.ModelElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ModelElementHasChildren link in links )
			{
				if ( target.Equals(link.SubElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship ModelHasConcepts
	/// Description de Bb.ApplicationCooperationViewPoint.ModelHasConcepts
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelHasConcepts.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelHasConcepts.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5b6958dd-4b35-4cc6-9384-6300f5852984")]
	public partial class ModelHasConcepts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasConcepts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b6958dd, 0x4b35, 0x4cc6, 0x93, 0x84, 0x63, 0x00, 0xf5, 0x85, 0x29, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasConcepts link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Concept to use as the target of the relationship.</param>
		public ModelHasConcepts(Model source, Concept target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasConcepts.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasConcepts.ConceptDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasConcepts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasConcepts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasConcepts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasConcepts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x582de730, 0xec77, 0x4e7c, 0xa2, 0xc3, 0xd2, 0x2c, 0x65, 0x1d, 0x2d, 0xd4);
		
		/// <summary>
		/// DomainRole Model
		/// Description de Bb.ApplicationCooperationViewPoint.ModelHasConcepts.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelHasConcepts/Model.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelHasConcepts/Model.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Concepts", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ModelHasConcepts/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("582de730-ec77-4e7c-a2c3-d22c651d2dd4")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Concept
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Concept element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Concept element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptDomainRoleId, newModel);
		}
		#endregion
		#region Concept domain role code
		
		/// <summary>
		/// Concept domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptDomainRoleId = new global::System.Guid(0x55648a0d, 0x20b7, 0x4a1c, 0x99, 0x87, 0xb3, 0x5b, 0xf3, 0x7d, 0x1a, 0x38);
		
		/// <summary>
		/// DomainRole Concept
		/// Description de Bb.ApplicationCooperationViewPoint.ModelHasConcepts.Concept
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelHasConcepts/Concept.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelHasConcepts/Concept.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ModelHasConcepts/Concept.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("55648a0d-20b7-4a1c-9987-b35bf37d1a38")]
		public virtual Concept Concept
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concept)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Concepts of a Model
		/// <summary>
		/// Gets a list of Concepts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Concept> GetConcepts(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Concept>, Concept>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasConcepts links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts> GetLinksToConcepts ( global::Bb.ApplicationCooperationViewPoint.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts>(modelInstance, global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts.ModelDomainRoleId);
		}
		#endregion
		#region Concept link accessor
		/// <summary>
		/// Get the ModelHasConcepts link to a Concept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts GetLinkToModel (global::Bb.ApplicationCooperationViewPoint.Concept conceptInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts>(conceptInstance, global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts.ConceptDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Concept not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasConcepts instance accessors
		
		/// <summary>
		/// Get any ModelHasConcepts links between a given Model and a Concept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts> GetLinks( global::Bb.ApplicationCooperationViewPoint.Model source, global::Bb.ApplicationCooperationViewPoint.Concept target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts>(source, global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts.ModelDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts link in links )
			{
				if ( target.Equals(link.Concept) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasConcepts link between a given Modeland a Concept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts GetLink( global::Bb.ApplicationCooperationViewPoint.Model source, global::Bb.ApplicationCooperationViewPoint.Concept target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts>(source, global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts.ModelDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ModelHasConcepts link in links )
			{
				if ( target.Equals(link.Concept) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship ConceptHasChildren
	/// Description de Bb.ApplicationCooperationViewPoint.ConceptHasChildren
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptHasChildren.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptHasChildren.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bedbf741-5157-42e7-b9fb-548e33779023")]
	public partial class ConceptHasChildren : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptHasChildren domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbedbf741, 0x5157, 0x42e7, 0xb9, 0xfb, 0x54, 0x8e, 0x33, 0x77, 0x90, 0x23);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptHasChildren link in the same Partition as the given Concept
		/// </summary>
		/// <param name="source">Concept to use as the source of the relationship.</param>
		/// <param name="target">ConceptElement to use as the target of the relationship.</param>
		public ConceptHasChildren(Concept source, ConceptElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptHasChildren.ConceptDomainRoleId, source), new DslModeling::RoleAssignment(ConceptHasChildren.ConceptElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptHasChildren(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptHasChildren(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptHasChildren(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptHasChildren(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Concept domain role code
		
		/// <summary>
		/// Concept domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptDomainRoleId = new global::System.Guid(0x995481df, 0x64be, 0x4c5e, 0xa6, 0x3e, 0xe6, 0xbe, 0xa5, 0x0e, 0xe7, 0x18);
		
		/// <summary>
		/// DomainRole Concept
		/// Description de Bb.ApplicationCooperationViewPoint.ConceptHasChildren.Concept
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptHasChildren/Concept.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptHasChildren/Concept.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Children", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ConceptHasChildren/Concept.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("995481df-64be-4c5e-a63e-e6bea50ee718")]
		public virtual Concept Concept
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concept)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a ConceptElement
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Concept GetParent(ConceptElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptElementDomainRoleId) as Concept;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(ConceptElement element, Concept newConcept)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptElementDomainRoleId, newConcept);
		}
		#endregion
		#region ConceptElement domain role code
		
		/// <summary>
		/// ConceptElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptElementDomainRoleId = new global::System.Guid(0xc11d0eca, 0x8d13, 0x4da9, 0xaa, 0xaf, 0x14, 0x54, 0xd1, 0xdc, 0xd2, 0x01);
		
		/// <summary>
		/// DomainRole ConceptElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ConceptHasChildren.ConceptElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptHasChildren/ConceptElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptHasChildren/ConceptElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ConceptHasChildren/ConceptElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c11d0eca-8d13-4da9-aaaf-1454d1dcd201")]
		public virtual ConceptElement ConceptElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Children of a Concept
		/// <summary>
		/// Gets a list of Children.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptElement> GetChildren(Concept element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConceptElement>, ConceptElement>(element, ConceptDomainRoleId);
		}
		#endregion
		#region Concept link accessor
		/// <summary>
		/// Get the list of ConceptHasChildren links to a Concept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren> GetLinksToChildren ( global::Bb.ApplicationCooperationViewPoint.Concept conceptInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren>(conceptInstance, global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren.ConceptDomainRoleId);
		}
		#endregion
		#region ConceptElement link accessor
		/// <summary>
		/// Get the ConceptHasChildren link to a ConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren GetLinkToParent (global::Bb.ApplicationCooperationViewPoint.ConceptElement conceptElementInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren>(conceptElementInstance, global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren.ConceptElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptHasChildren instance accessors
		
		/// <summary>
		/// Get any ConceptHasChildren links between a given Concept and a ConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren> GetLinks( global::Bb.ApplicationCooperationViewPoint.Concept source, global::Bb.ApplicationCooperationViewPoint.ConceptElement target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren>(source, global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren.ConceptDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren link in links )
			{
				if ( target.Equals(link.ConceptElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptHasChildren link between a given Conceptand a ConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren GetLink( global::Bb.ApplicationCooperationViewPoint.Concept source, global::Bb.ApplicationCooperationViewPoint.ConceptElement target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren>(source, global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren.ConceptDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ConceptHasChildren link in links )
			{
				if ( target.Equals(link.ConceptElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship ConceptElementHasChildren
	/// Description de Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5eeb81ec-92bf-487f-834b-0045d600e9f4")]
	public partial class ConceptElementHasChildren : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptElementHasChildren domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5eeb81ec, 0x92bf, 0x487f, 0x83, 0x4b, 0x00, 0x45, 0xd6, 0x00, 0xe9, 0xf4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptElementHasChildren link in the same Partition as the given ConceptElement
		/// </summary>
		/// <param name="source">ConceptElement to use as the source of the relationship.</param>
		/// <param name="target">ConceptSubElement to use as the target of the relationship.</param>
		public ConceptElementHasChildren(ConceptElement source, ConceptSubElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptElementHasChildren.ConceptElementDomainRoleId, source), new DslModeling::RoleAssignment(ConceptElementHasChildren.ConceptSubElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptElementHasChildren(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptElementHasChildren(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptElementHasChildren(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptElementHasChildren(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptElement domain role code
		
		/// <summary>
		/// ConceptElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptElementDomainRoleId = new global::System.Guid(0xe504b189, 0x80a3, 0x4840, 0x91, 0x53, 0x88, 0x4c, 0x24, 0x37, 0x58, 0xb9);
		
		/// <summary>
		/// DomainRole ConceptElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren.ConceptElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren/ConceptElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren/ConceptElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Children", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren/ConceptElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e504b189-80a3-4840-9153-884c243758b9")]
		public virtual ConceptElement ConceptElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a ConceptSubElement
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptElement GetParent(ConceptSubElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConceptSubElementDomainRoleId) as ConceptElement;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(ConceptSubElement element, ConceptElement newConceptElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConceptSubElementDomainRoleId, newConceptElement);
		}
		#endregion
		#region ConceptSubElement domain role code
		
		/// <summary>
		/// ConceptSubElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptSubElementDomainRoleId = new global::System.Guid(0x1fac3fe2, 0xb2c6, 0x4094, 0x87, 0x63, 0xc8, 0xb9, 0x6e, 0x91, 0x90, 0xf0);
		
		/// <summary>
		/// DomainRole ConceptSubElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren.ConceptSubElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren/ConceptSubElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren/ConceptSubElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren/ConceptSubElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1fac3fe2-b2c6-4094-8763-c8b96e9190f0")]
		public virtual ConceptSubElement ConceptSubElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptSubElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptSubElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptSubElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Children of a ConceptElement
		/// <summary>
		/// Gets a list of Children.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConceptSubElement> GetChildren(ConceptElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConceptSubElement>, ConceptSubElement>(element, ConceptElementDomainRoleId);
		}
		#endregion
		#region ConceptElement link accessor
		/// <summary>
		/// Get the list of ConceptElementHasChildren links to a ConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren> GetLinksToChildren ( global::Bb.ApplicationCooperationViewPoint.ConceptElement conceptElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren>(conceptElementInstance, global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren.ConceptElementDomainRoleId);
		}
		#endregion
		#region ConceptSubElement link accessor
		/// <summary>
		/// Get the ConceptElementHasChildren link to a ConceptSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren GetLinkToParent (global::Bb.ApplicationCooperationViewPoint.ConceptSubElement conceptSubElementInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren>(conceptSubElementInstance, global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren.ConceptSubElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConceptSubElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptElementHasChildren instance accessors
		
		/// <summary>
		/// Get any ConceptElementHasChildren links between a given ConceptElement and a ConceptSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren> GetLinks( global::Bb.ApplicationCooperationViewPoint.ConceptElement source, global::Bb.ApplicationCooperationViewPoint.ConceptSubElement target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren>(source, global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren.ConceptElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren link in links )
			{
				if ( target.Equals(link.ConceptSubElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptElementHasChildren link between a given ConceptElementand a ConceptSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren GetLink( global::Bb.ApplicationCooperationViewPoint.ConceptElement source, global::Bb.ApplicationCooperationViewPoint.ConceptSubElement target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren>(source, global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren.ConceptElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ConceptElementHasChildren link in links )
			{
				if ( target.Equals(link.ConceptSubElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship ModelHasRelationships
	/// Description de Bb.ApplicationCooperationViewPoint.ModelHasRelationships
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelHasRelationships.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelHasRelationships.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("55dbe5cb-6d89-457e-8dcd-092930328e46")]
	public partial class ModelHasRelationships : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasRelationships domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x55dbe5cb, 0x6d89, 0x457e, 0x8d, 0xcd, 0x09, 0x29, 0x30, 0x32, 0x8e, 0x46);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasRelationships link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Relationship to use as the target of the relationship.</param>
		public ModelHasRelationships(Model source, Relationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasRelationships.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasRelationships.RelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasRelationships(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasRelationships(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasRelationships(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasRelationships(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x0a33673b, 0x918f, 0x4f58, 0x9d, 0x91, 0xc4, 0x90, 0x79, 0x91, 0xb9, 0xd9);
		
		/// <summary>
		/// DomainRole Model
		/// Description de Bb.ApplicationCooperationViewPoint.ModelHasRelationships.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelHasRelationships/Model.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelHasRelationships/Model.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Relationships", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ModelHasRelationships/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0a33673b-918f-4f58-9d91-c4907991b9d9")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Relationship
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Relationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Relationship element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newModel);
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x77111e5d, 0xa493, 0x4d25, 0x87, 0xec, 0x67, 0x6f, 0xf4, 0x6d, 0x19, 0x87);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ModelHasRelationships.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelHasRelationships/Relationship.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelHasRelationships/Relationship.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ModelHasRelationships/Relationship.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("77111e5d-a493-4d25-87ec-676ff46d1987")]
		public virtual Relationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Relationships of a Model
		/// <summary>
		/// Gets a list of Relationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationship> GetRelationships(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationship>, Relationship>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasRelationships links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships> GetLinksToRelationships ( global::Bb.ApplicationCooperationViewPoint.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships>(modelInstance, global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships.ModelDomainRoleId);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the ModelHasRelationships link to a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships GetLinkToModel (global::Bb.ApplicationCooperationViewPoint.Relationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships>(relationshipInstance, global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasRelationships instance accessors
		
		/// <summary>
		/// Get any ModelHasRelationships links between a given Model and a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships> GetLinks( global::Bb.ApplicationCooperationViewPoint.Model source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships>(source, global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships.ModelDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasRelationships link between a given Modeland a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships GetLink( global::Bb.ApplicationCooperationViewPoint.Model source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships>(source, global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships.ModelDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ModelHasRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship SubElementReferencesRightRelationships
	/// Description de
	/// Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("820c2cb8-59a2-498f-be37-580b2899fb31")]
	public partial class SubElementReferencesRightRelationships : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubElementReferencesRightRelationships domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x820c2cb8, 0x59a2, 0x498f, 0xbe, 0x37, 0x58, 0x0b, 0x28, 0x99, 0xfb, 0x31);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubElementReferencesRightRelationships link in the same Partition as the given SubElement
		/// </summary>
		/// <param name="source">SubElement to use as the source of the relationship.</param>
		/// <param name="target">Relationship to use as the target of the relationship.</param>
		public SubElementReferencesRightRelationships(SubElement source, Relationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubElementReferencesRightRelationships.SubElementDomainRoleId, source), new DslModeling::RoleAssignment(SubElementReferencesRightRelationships.RelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubElementReferencesRightRelationships(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubElementReferencesRightRelationships(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubElementReferencesRightRelationships(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubElementReferencesRightRelationships(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SubElement domain role code
		
		/// <summary>
		/// SubElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubElementDomainRoleId = new global::System.Guid(0x1bc0ce3d, 0xa6f8, 0x424e, 0x99, 0x24, 0x26, 0x7b, 0x36, 0x46, 0xef, 0x84);
		
		/// <summary>
		/// DomainRole SubElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships.SubElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships/SubElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships/SubElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RightRelationships", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships/SubElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1bc0ce3d-a6f8-424e-9924-267b3646ef84")]
		public virtual SubElement SubElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeftSubElement of a Relationship
		/// <summary>
		/// Gets LeftSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubElement GetLeftSubElement(Relationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as SubElement;
		}
		
		/// <summary>
		/// Sets LeftSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLeftSubElement(Relationship element, SubElement newSubElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newSubElement);
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0xa0bfb131, 0x2213, 0x4886, 0xbd, 0xc3, 0xec, 0x22, 0xcf, 0xae, 0x31, 0x18);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships/Relationship.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships/Relationship.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeftSubElement", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a0bfb131-2213-4886-bdc3-ec22cfae3118")]
		public virtual Relationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RightRelationships of a SubElement
		/// <summary>
		/// Gets a list of RightRelationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationship> GetRightRelationships(SubElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationship>, Relationship>(element, SubElementDomainRoleId);
		}
		#endregion
		#region SubElement link accessor
		/// <summary>
		/// Get the list of SubElementReferencesRightRelationships links to a SubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships> GetLinksToRightRelationships ( global::Bb.ApplicationCooperationViewPoint.SubElement subElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships>(subElementInstance, global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships.SubElementDomainRoleId);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the SubElementReferencesRightRelationships link to a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships GetLinkToLeftSubElement (global::Bb.ApplicationCooperationViewPoint.Relationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships>(relationshipInstance, global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubElementReferencesRightRelationships instance accessors
		
		/// <summary>
		/// Get any SubElementReferencesRightRelationships links between a given SubElement and a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships> GetLinks( global::Bb.ApplicationCooperationViewPoint.SubElement source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships>(source, global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships.SubElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubElementReferencesRightRelationships link between a given SubElementand a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships GetLink( global::Bb.ApplicationCooperationViewPoint.SubElement source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships>(source, global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships.SubElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.SubElementReferencesRightRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship ConceptReferencesRightRelationships
	/// Description de
	/// Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("929c1a72-faf3-4091-aea2-942e25cc3693")]
	public partial class ConceptReferencesRightRelationships : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptReferencesRightRelationships domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x929c1a72, 0xfaf3, 0x4091, 0xae, 0xa2, 0x94, 0x2e, 0x25, 0xcc, 0x36, 0x93);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptReferencesRightRelationships link in the same Partition as the given Concept
		/// </summary>
		/// <param name="source">Concept to use as the source of the relationship.</param>
		/// <param name="target">Relationship to use as the target of the relationship.</param>
		public ConceptReferencesRightRelationships(Concept source, Relationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptReferencesRightRelationships.ConceptDomainRoleId, source), new DslModeling::RoleAssignment(ConceptReferencesRightRelationships.RelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptReferencesRightRelationships(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptReferencesRightRelationships(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptReferencesRightRelationships(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptReferencesRightRelationships(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Concept domain role code
		
		/// <summary>
		/// Concept domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptDomainRoleId = new global::System.Guid(0x33d7c8d6, 0xbb81, 0x4cfe, 0x82, 0x50, 0x08, 0x60, 0xb7, 0xb1, 0x28, 0xaf);
		
		/// <summary>
		/// DomainRole Concept
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships.Concept
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships/Concept.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships/Concept.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RightRelationships", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships/Concept.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("33d7c8d6-bb81-4cfe-8250-0860b7b128af")]
		public virtual Concept Concept
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concept)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeftConcept of a Relationship
		/// <summary>
		/// Gets LeftConcept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Concept GetLeftConcept(Relationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as Concept;
		}
		
		/// <summary>
		/// Sets LeftConcept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLeftConcept(Relationship element, Concept newConcept)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newConcept);
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x45fc7239, 0xcc02, 0x40f9, 0xb9, 0x12, 0x38, 0x2e, 0xca, 0x5a, 0xb0, 0xb7);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships/Relationship.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships/Relationship.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeftConcept", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("45fc7239-cc02-40f9-b912-382eca5ab0b7")]
		public virtual Relationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RightRelationships of a Concept
		/// <summary>
		/// Gets a list of RightRelationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationship> GetRightRelationships(Concept element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationship>, Relationship>(element, ConceptDomainRoleId);
		}
		#endregion
		#region Concept link accessor
		/// <summary>
		/// Get the list of ConceptReferencesRightRelationships links to a Concept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships> GetLinksToRightRelationships ( global::Bb.ApplicationCooperationViewPoint.Concept conceptInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships>(conceptInstance, global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships.ConceptDomainRoleId);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the ConceptReferencesRightRelationships link to a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships GetLinkToLeftConcept (global::Bb.ApplicationCooperationViewPoint.Relationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships>(relationshipInstance, global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptReferencesRightRelationships instance accessors
		
		/// <summary>
		/// Get any ConceptReferencesRightRelationships links between a given Concept and a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships> GetLinks( global::Bb.ApplicationCooperationViewPoint.Concept source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships>(source, global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships.ConceptDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptReferencesRightRelationships link between a given Conceptand a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships GetLink( global::Bb.ApplicationCooperationViewPoint.Concept source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships>(source, global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships.ConceptDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ConceptReferencesRightRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship ConceptElementReferencesRightRelationships
	/// Description de
	/// Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c8a244dc-37ba-45b6-9bd6-da13e0f09c0f")]
	public partial class ConceptElementReferencesRightRelationships : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptElementReferencesRightRelationships domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc8a244dc, 0x37ba, 0x45b6, 0x9b, 0xd6, 0xda, 0x13, 0xe0, 0xf0, 0x9c, 0x0f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptElementReferencesRightRelationships link in the same Partition as the given ConceptElement
		/// </summary>
		/// <param name="source">ConceptElement to use as the source of the relationship.</param>
		/// <param name="target">Relationship to use as the target of the relationship.</param>
		public ConceptElementReferencesRightRelationships(ConceptElement source, Relationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptElementReferencesRightRelationships.ConceptElementDomainRoleId, source), new DslModeling::RoleAssignment(ConceptElementReferencesRightRelationships.RelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptElementReferencesRightRelationships(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptElementReferencesRightRelationships(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptElementReferencesRightRelationships(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptElementReferencesRightRelationships(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptElement domain role code
		
		/// <summary>
		/// ConceptElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptElementDomainRoleId = new global::System.Guid(0xcc4d7dac, 0x913b, 0x44fe, 0x84, 0xe1, 0x1d, 0xe4, 0x5f, 0xd2, 0xd5, 0xde);
		
		/// <summary>
		/// DomainRole ConceptElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships.ConceptElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships/ConceptElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships/ConceptElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RightRelationships", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships/ConceptElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cc4d7dac-913b-44fe-84e1-1de45fd2d5de")]
		public virtual ConceptElement ConceptElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeftConceptElement of a Relationship
		/// <summary>
		/// Gets LeftConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptElement GetLeftConceptElement(Relationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as ConceptElement;
		}
		
		/// <summary>
		/// Sets LeftConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLeftConceptElement(Relationship element, ConceptElement newConceptElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newConceptElement);
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x5ff17734, 0xe48c, 0x4251, 0xa9, 0xd9, 0x84, 0x28, 0xa5, 0xc0, 0x81, 0xa9);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships/Relationship.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships/Relationship.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeftConceptElement", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5ff17734-e48c-4251-a9d9-8428a5c081a9")]
		public virtual Relationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RightRelationships of a ConceptElement
		/// <summary>
		/// Gets a list of RightRelationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationship> GetRightRelationships(ConceptElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationship>, Relationship>(element, ConceptElementDomainRoleId);
		}
		#endregion
		#region ConceptElement link accessor
		/// <summary>
		/// Get the list of ConceptElementReferencesRightRelationships links to a ConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships> GetLinksToRightRelationships ( global::Bb.ApplicationCooperationViewPoint.ConceptElement conceptElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships>(conceptElementInstance, global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships.ConceptElementDomainRoleId);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the ConceptElementReferencesRightRelationships link to a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships GetLinkToLeftConceptElement (global::Bb.ApplicationCooperationViewPoint.Relationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships>(relationshipInstance, global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptElementReferencesRightRelationships instance accessors
		
		/// <summary>
		/// Get any ConceptElementReferencesRightRelationships links between a given ConceptElement and a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships> GetLinks( global::Bb.ApplicationCooperationViewPoint.ConceptElement source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships>(source, global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships.ConceptElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptElementReferencesRightRelationships link between a given ConceptElementand a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships GetLink( global::Bb.ApplicationCooperationViewPoint.ConceptElement source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships>(source, global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships.ConceptElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ConceptElementReferencesRightRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship ConceptSubElementReferencesRightRelationships
	/// Description de
	/// Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("5878e7a2-52ad-499b-88b3-3c17c14e3f4c")]
	public partial class ConceptSubElementReferencesRightRelationships : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConceptSubElementReferencesRightRelationships domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5878e7a2, 0x52ad, 0x499b, 0x88, 0xb3, 0x3c, 0x17, 0xc1, 0x4e, 0x3f, 0x4c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConceptSubElementReferencesRightRelationships link in the same Partition as the given ConceptSubElement
		/// </summary>
		/// <param name="source">ConceptSubElement to use as the source of the relationship.</param>
		/// <param name="target">Relationship to use as the target of the relationship.</param>
		public ConceptSubElementReferencesRightRelationships(ConceptSubElement source, Relationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConceptSubElementReferencesRightRelationships.ConceptSubElementDomainRoleId, source), new DslModeling::RoleAssignment(ConceptSubElementReferencesRightRelationships.RelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptSubElementReferencesRightRelationships(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptSubElementReferencesRightRelationships(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConceptSubElementReferencesRightRelationships(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConceptSubElementReferencesRightRelationships(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConceptSubElement domain role code
		
		/// <summary>
		/// ConceptSubElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptSubElementDomainRoleId = new global::System.Guid(0xb1fc2ccf, 0xdbf3, 0x418b, 0xae, 0x07, 0x30, 0xbd, 0x25, 0x07, 0x35, 0x03);
		
		/// <summary>
		/// DomainRole ConceptSubElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships.ConceptSubElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships/ConceptSubElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships/ConceptSubElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RightRelationships", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships/ConceptSubElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b1fc2ccf-dbf3-418b-ae07-30bd25073503")]
		public virtual ConceptSubElement ConceptSubElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptSubElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptSubElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptSubElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeftConceptSubElement of a Relationship
		/// <summary>
		/// Gets LeftConceptSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptSubElement GetLeftConceptSubElement(Relationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as ConceptSubElement;
		}
		
		/// <summary>
		/// Sets LeftConceptSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLeftConceptSubElement(Relationship element, ConceptSubElement newConceptSubElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newConceptSubElement);
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x9517762b, 0xbeed, 0x48a5, 0xae, 0x52, 0xa1, 0x64, 0x6c, 0x94, 0x0c, 0x78);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships/Relationship.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships/Relationship.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeftConceptSubElement", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9517762b-beed-48a5-ae52-a1646c940c78")]
		public virtual Relationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RightRelationships of a ConceptSubElement
		/// <summary>
		/// Gets a list of RightRelationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationship> GetRightRelationships(ConceptSubElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationship>, Relationship>(element, ConceptSubElementDomainRoleId);
		}
		#endregion
		#region ConceptSubElement link accessor
		/// <summary>
		/// Get the list of ConceptSubElementReferencesRightRelationships links to a ConceptSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships> GetLinksToRightRelationships ( global::Bb.ApplicationCooperationViewPoint.ConceptSubElement conceptSubElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships>(conceptSubElementInstance, global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships.ConceptSubElementDomainRoleId);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the ConceptSubElementReferencesRightRelationships link to a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships GetLinkToLeftConceptSubElement (global::Bb.ApplicationCooperationViewPoint.Relationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships>(relationshipInstance, global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptSubElementReferencesRightRelationships instance accessors
		
		/// <summary>
		/// Get any ConceptSubElementReferencesRightRelationships links between a given ConceptSubElement and a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships> GetLinks( global::Bb.ApplicationCooperationViewPoint.ConceptSubElement source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships>(source, global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships.ConceptSubElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConceptSubElementReferencesRightRelationships link between a given ConceptSubElementand a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships GetLink( global::Bb.ApplicationCooperationViewPoint.ConceptSubElement source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships>(source, global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships.ConceptSubElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ConceptSubElementReferencesRightRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship ModelElementReferencesRightRelationships
	/// Description de
	/// Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f3f7d5ab-f08d-4def-992e-7c1baeba29bc")]
	public partial class ModelElementReferencesRightRelationships : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelElementReferencesRightRelationships domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf3f7d5ab, 0xf08d, 0x4def, 0x99, 0x2e, 0x7c, 0x1b, 0xae, 0xba, 0x29, 0xbc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelElementReferencesRightRelationships link in the same Partition as the given ModelElement
		/// </summary>
		/// <param name="source">ModelElement to use as the source of the relationship.</param>
		/// <param name="target">Relationship to use as the target of the relationship.</param>
		public ModelElementReferencesRightRelationships(ModelElement source, Relationship target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelElementReferencesRightRelationships.ModelElementDomainRoleId, source), new DslModeling::RoleAssignment(ModelElementReferencesRightRelationships.RelationshipDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelElementReferencesRightRelationships(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelElementReferencesRightRelationships(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelElementReferencesRightRelationships(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelElementReferencesRightRelationships(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelElement domain role code
		
		/// <summary>
		/// ModelElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelElementDomainRoleId = new global::System.Guid(0x9adf2214, 0xef6c, 0x46af, 0x85, 0xf7, 0xb2, 0x82, 0x6b, 0x11, 0xce, 0x5e);
		
		/// <summary>
		/// DomainRole ModelElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships.ModelElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships/ModelElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships/ModelElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RightRelationships", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships/ModelElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9adf2214-ef6c-46af-85f7-b2826b11ce5e")]
		public virtual ModelElement ModelElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeftModelElement of a Relationship
		/// <summary>
		/// Gets LeftModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelElement GetLeftModelElement(Relationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as ModelElement;
		}
		
		/// <summary>
		/// Sets LeftModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetLeftModelElement(Relationship element, ModelElement newModelElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newModelElement);
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x38426125, 0x8550, 0x44b4, 0xb9, 0xa9, 0x20, 0xb0, 0x0a, 0x92, 0x40, 0x62);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships/Relationship.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships/Relationship.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeftModelElement", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("38426125-8550-44b4-b9a9-20b00a924062")]
		public virtual Relationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RightRelationships of a ModelElement
		/// <summary>
		/// Gets a list of RightRelationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationship> GetRightRelationships(ModelElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationship>, Relationship>(element, ModelElementDomainRoleId);
		}
		#endregion
		#region ModelElement link accessor
		/// <summary>
		/// Get the list of ModelElementReferencesRightRelationships links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships> GetLinksToRightRelationships ( global::Bb.ApplicationCooperationViewPoint.ModelElement modelElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships>(modelElementInstance, global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships.ModelElementDomainRoleId);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the ModelElementReferencesRightRelationships link to a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships GetLinkToLeftModelElement (global::Bb.ApplicationCooperationViewPoint.Relationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships>(relationshipInstance, global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelElementReferencesRightRelationships instance accessors
		
		/// <summary>
		/// Get any ModelElementReferencesRightRelationships links between a given ModelElement and a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships> GetLinks( global::Bb.ApplicationCooperationViewPoint.ModelElement source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships>(source, global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships.ModelElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelElementReferencesRightRelationships link between a given ModelElementand a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships GetLink( global::Bb.ApplicationCooperationViewPoint.ModelElement source, global::Bb.ApplicationCooperationViewPoint.Relationship target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships>(source, global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships.ModelElementDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.ModelElementReferencesRightRelationships link in links )
			{
				if ( target.Equals(link.Relationship) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship RelationshipReferencesRightModelElement
	/// Description de
	/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("da0dda76-c31d-4fd7-8d0b-616818a37448")]
	public partial class RelationshipReferencesRightModelElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RelationshipReferencesRightModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xda0dda76, 0xc31d, 0x4fd7, 0x8d, 0x0b, 0x61, 0x68, 0x18, 0xa3, 0x74, 0x48);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RelationshipReferencesRightModelElement link in the same Partition as the given Relationship
		/// </summary>
		/// <param name="source">Relationship to use as the source of the relationship.</param>
		/// <param name="target">ModelElement to use as the target of the relationship.</param>
		public RelationshipReferencesRightModelElement(Relationship source, ModelElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RelationshipReferencesRightModelElement.RelationshipDomainRoleId, source), new DslModeling::RoleAssignment(RelationshipReferencesRightModelElement.ModelElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipReferencesRightModelElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipReferencesRightModelElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipReferencesRightModelElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipReferencesRightModelElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x26f661c5, 0xfe19, 0x493f, 0x93, 0xe4, 0x55, 0x6f, 0x6f, 0xe7, 0x9f, 0x3a);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement/Relationship.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement/Relationship.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RightModelElement", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("26f661c5-fe19-493f-93e4-556f6fe79f3a")]
		public virtual Relationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeftRelationships of a ModelElement
		/// <summary>
		/// Gets a list of LeftRelationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationship> GetLeftRelationships(ModelElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationship>, Relationship>(element, ModelElementDomainRoleId);
		}
		#endregion
		#region ModelElement domain role code
		
		/// <summary>
		/// ModelElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelElementDomainRoleId = new global::System.Guid(0x49b66a88, 0x1c2e, 0x47e2, 0xba, 0x53, 0xc2, 0x98, 0xb1, 0x78, 0x73, 0x98);
		
		/// <summary>
		/// DomainRole ModelElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement.ModelElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement/ModelElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement/ModelElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeftRelationships", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement/ModelElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("49b66a88-1c2e-47e2-ba53-c298b1787398")]
		public virtual ModelElement ModelElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RightModelElement of a Relationship
		/// <summary>
		/// Gets RightModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelElement GetRightModelElement(Relationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as ModelElement;
		}
		
		/// <summary>
		/// Sets RightModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRightModelElement(Relationship element, ModelElement newModelElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newModelElement);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the RelationshipReferencesRightModelElement link to a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement GetLinkToRightModelElement (global::Bb.ApplicationCooperationViewPoint.Relationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement>(relationshipInstance, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelElement link accessor
		/// <summary>
		/// Get the list of RelationshipReferencesRightModelElement links to a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement> GetLinksToLeftRelationships ( global::Bb.ApplicationCooperationViewPoint.ModelElement modelElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement>(modelElementInstance, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement.ModelElementDomainRoleId);
		}
		#endregion
		#region RelationshipReferencesRightModelElement instance accessors
		
		/// <summary>
		/// Get any RelationshipReferencesRightModelElement links between a given Relationship and a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement> GetLinks( global::Bb.ApplicationCooperationViewPoint.Relationship source, global::Bb.ApplicationCooperationViewPoint.ModelElement target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement>(source, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement.RelationshipDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement link in links )
			{
				if ( target.Equals(link.ModelElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RelationshipReferencesRightModelElement link between a given Relationshipand a ModelElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement GetLink( global::Bb.ApplicationCooperationViewPoint.Relationship source, global::Bb.ApplicationCooperationViewPoint.ModelElement target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement>(source, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement.RelationshipDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightModelElement link in links )
			{
				if ( target.Equals(link.ModelElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship RelationshipReferencesRightSubElement
	/// Description de
	/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("2a61d268-9d72-489c-94a2-78fc3be0cf63")]
	public partial class RelationshipReferencesRightSubElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RelationshipReferencesRightSubElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2a61d268, 0x9d72, 0x489c, 0x94, 0xa2, 0x78, 0xfc, 0x3b, 0xe0, 0xcf, 0x63);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RelationshipReferencesRightSubElement link in the same Partition as the given Relationship
		/// </summary>
		/// <param name="source">Relationship to use as the source of the relationship.</param>
		/// <param name="target">SubElement to use as the target of the relationship.</param>
		public RelationshipReferencesRightSubElement(Relationship source, SubElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RelationshipReferencesRightSubElement.RelationshipDomainRoleId, source), new DslModeling::RoleAssignment(RelationshipReferencesRightSubElement.SubElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipReferencesRightSubElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipReferencesRightSubElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipReferencesRightSubElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipReferencesRightSubElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x03b8f442, 0x51b5, 0x493d, 0x9f, 0x5c, 0xd1, 0xa9, 0x62, 0x15, 0x90, 0xef);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement/Relationship.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement/Relationship.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RightSubElement", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("03b8f442-51b5-493d-9f5c-d1a9621590ef")]
		public virtual Relationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeftRelationships of a SubElement
		/// <summary>
		/// Gets a list of LeftRelationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationship> GetLeftRelationships(SubElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationship>, Relationship>(element, SubElementDomainRoleId);
		}
		#endregion
		#region SubElement domain role code
		
		/// <summary>
		/// SubElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubElementDomainRoleId = new global::System.Guid(0xec450d36, 0x9d80, 0x4f8f, 0xb4, 0x74, 0xa0, 0x6c, 0xca, 0x14, 0xa8, 0xf9);
		
		/// <summary>
		/// DomainRole SubElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement.SubElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement/SubElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement/SubElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeftRelationships", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement/SubElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ec450d36-9d80-4f8f-b474-a06cca14a8f9")]
		public virtual SubElement SubElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RightSubElement of a Relationship
		/// <summary>
		/// Gets RightSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubElement GetRightSubElement(Relationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as SubElement;
		}
		
		/// <summary>
		/// Sets RightSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRightSubElement(Relationship element, SubElement newSubElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newSubElement);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the RelationshipReferencesRightSubElement link to a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement GetLinkToRightSubElement (global::Bb.ApplicationCooperationViewPoint.Relationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement>(relationshipInstance, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubElement link accessor
		/// <summary>
		/// Get the list of RelationshipReferencesRightSubElement links to a SubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement> GetLinksToLeftRelationships ( global::Bb.ApplicationCooperationViewPoint.SubElement subElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement>(subElementInstance, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement.SubElementDomainRoleId);
		}
		#endregion
		#region RelationshipReferencesRightSubElement instance accessors
		
		/// <summary>
		/// Get any RelationshipReferencesRightSubElement links between a given Relationship and a SubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement> GetLinks( global::Bb.ApplicationCooperationViewPoint.Relationship source, global::Bb.ApplicationCooperationViewPoint.SubElement target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement>(source, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement.RelationshipDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement link in links )
			{
				if ( target.Equals(link.SubElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RelationshipReferencesRightSubElement link between a given Relationshipand a SubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement GetLink( global::Bb.ApplicationCooperationViewPoint.Relationship source, global::Bb.ApplicationCooperationViewPoint.SubElement target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement>(source, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement.RelationshipDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightSubElement link in links )
			{
				if ( target.Equals(link.SubElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship RelationshipReferencesRightConcept
	/// Description de
	/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d977763b-a2bc-4d4a-9b3a-ba88094235d1")]
	public partial class RelationshipReferencesRightConcept : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RelationshipReferencesRightConcept domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd977763b, 0xa2bc, 0x4d4a, 0x9b, 0x3a, 0xba, 0x88, 0x09, 0x42, 0x35, 0xd1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RelationshipReferencesRightConcept link in the same Partition as the given Relationship
		/// </summary>
		/// <param name="source">Relationship to use as the source of the relationship.</param>
		/// <param name="target">Concept to use as the target of the relationship.</param>
		public RelationshipReferencesRightConcept(Relationship source, Concept target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RelationshipReferencesRightConcept.RelationshipDomainRoleId, source), new DslModeling::RoleAssignment(RelationshipReferencesRightConcept.ConceptDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipReferencesRightConcept(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipReferencesRightConcept(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipReferencesRightConcept(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipReferencesRightConcept(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x51d60845, 0xb6fd, 0x41c2, 0xa2, 0x23, 0xf4, 0xeb, 0xff, 0x89, 0x85, 0x05);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept/Relationship.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept/Relationship.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RightConcept", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("51d60845-b6fd-41c2-a223-f4ebff898505")]
		public virtual Relationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeftRelationships of a Concept
		/// <summary>
		/// Gets a list of LeftRelationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationship> GetLeftRelationships(Concept element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationship>, Relationship>(element, ConceptDomainRoleId);
		}
		#endregion
		#region Concept domain role code
		
		/// <summary>
		/// Concept domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptDomainRoleId = new global::System.Guid(0x386bc48c, 0x234b, 0x4b63, 0xac, 0xbf, 0x61, 0x25, 0x3e, 0xef, 0xfb, 0x72);
		
		/// <summary>
		/// DomainRole Concept
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept.Concept
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept/Concept.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept/Concept.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeftRelationships", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept/Concept.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("386bc48c-234b-4b63-acbf-61253eeffb72")]
		public virtual Concept Concept
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Concept)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RightConcept of a Relationship
		/// <summary>
		/// Gets RightConcept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Concept GetRightConcept(Relationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as Concept;
		}
		
		/// <summary>
		/// Sets RightConcept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRightConcept(Relationship element, Concept newConcept)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newConcept);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the RelationshipReferencesRightConcept link to a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept GetLinkToRightConcept (global::Bb.ApplicationCooperationViewPoint.Relationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept>(relationshipInstance, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Concept link accessor
		/// <summary>
		/// Get the list of RelationshipReferencesRightConcept links to a Concept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept> GetLinksToLeftRelationships ( global::Bb.ApplicationCooperationViewPoint.Concept conceptInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept>(conceptInstance, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept.ConceptDomainRoleId);
		}
		#endregion
		#region RelationshipReferencesRightConcept instance accessors
		
		/// <summary>
		/// Get any RelationshipReferencesRightConcept links between a given Relationship and a Concept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept> GetLinks( global::Bb.ApplicationCooperationViewPoint.Relationship source, global::Bb.ApplicationCooperationViewPoint.Concept target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept>(source, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept.RelationshipDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept link in links )
			{
				if ( target.Equals(link.Concept) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RelationshipReferencesRightConcept link between a given Relationshipand a Concept.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept GetLink( global::Bb.ApplicationCooperationViewPoint.Relationship source, global::Bb.ApplicationCooperationViewPoint.Concept target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept>(source, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept.RelationshipDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConcept link in links )
			{
				if ( target.Equals(link.Concept) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship RelationshipReferencesRightConceptElement
	/// Description de
	/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e3ee641d-ee97-42cd-8fab-123e671e38b4")]
	public partial class RelationshipReferencesRightConceptElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RelationshipReferencesRightConceptElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe3ee641d, 0xee97, 0x42cd, 0x8f, 0xab, 0x12, 0x3e, 0x67, 0x1e, 0x38, 0xb4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RelationshipReferencesRightConceptElement link in the same Partition as the given Relationship
		/// </summary>
		/// <param name="source">Relationship to use as the source of the relationship.</param>
		/// <param name="target">ConceptElement to use as the target of the relationship.</param>
		public RelationshipReferencesRightConceptElement(Relationship source, ConceptElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RelationshipReferencesRightConceptElement.RelationshipDomainRoleId, source), new DslModeling::RoleAssignment(RelationshipReferencesRightConceptElement.ConceptElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipReferencesRightConceptElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipReferencesRightConceptElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipReferencesRightConceptElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipReferencesRightConceptElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x2d41e98e, 0xee0e, 0x452d, 0xbd, 0x7a, 0x2f, 0x44, 0xe4, 0x5d, 0xfe, 0x4d);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement/Relationship.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement/Relationship.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RightConceptElement", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2d41e98e-ee0e-452d-bd7a-2f44e45dfe4d")]
		public virtual Relationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeftRelationships of a ConceptElement
		/// <summary>
		/// Gets a list of LeftRelationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationship> GetLeftRelationships(ConceptElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationship>, Relationship>(element, ConceptElementDomainRoleId);
		}
		#endregion
		#region ConceptElement domain role code
		
		/// <summary>
		/// ConceptElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptElementDomainRoleId = new global::System.Guid(0x1169c9ea, 0xc8e9, 0x4c52, 0xb2, 0x90, 0x39, 0x10, 0x51, 0xd5, 0x57, 0xb7);
		
		/// <summary>
		/// DomainRole ConceptElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement.ConceptElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement/ConceptElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement/ConceptElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeftRelationships", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement/ConceptElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1169c9ea-c8e9-4c52-b290-391051d557b7")]
		public virtual ConceptElement ConceptElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RightConceptElement of a Relationship
		/// <summary>
		/// Gets RightConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptElement GetRightConceptElement(Relationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as ConceptElement;
		}
		
		/// <summary>
		/// Sets RightConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRightConceptElement(Relationship element, ConceptElement newConceptElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newConceptElement);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the RelationshipReferencesRightConceptElement link to a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement GetLinkToRightConceptElement (global::Bb.ApplicationCooperationViewPoint.Relationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement>(relationshipInstance, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptElement link accessor
		/// <summary>
		/// Get the list of RelationshipReferencesRightConceptElement links to a ConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement> GetLinksToLeftRelationships ( global::Bb.ApplicationCooperationViewPoint.ConceptElement conceptElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement>(conceptElementInstance, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement.ConceptElementDomainRoleId);
		}
		#endregion
		#region RelationshipReferencesRightConceptElement instance accessors
		
		/// <summary>
		/// Get any RelationshipReferencesRightConceptElement links between a given Relationship and a ConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement> GetLinks( global::Bb.ApplicationCooperationViewPoint.Relationship source, global::Bb.ApplicationCooperationViewPoint.ConceptElement target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement>(source, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement.RelationshipDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement link in links )
			{
				if ( target.Equals(link.ConceptElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RelationshipReferencesRightConceptElement link between a given Relationshipand a ConceptElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement GetLink( global::Bb.ApplicationCooperationViewPoint.Relationship source, global::Bb.ApplicationCooperationViewPoint.ConceptElement target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement>(source, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement.RelationshipDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptElement link in links )
			{
				if ( target.Equals(link.ConceptElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainRelationship RelationshipReferencesRightConceptSubElement
	/// Description de
	/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e4d3071a-c375-4661-a772-e6c0b0c717cf")]
	public partial class RelationshipReferencesRightConceptSubElement : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RelationshipReferencesRightConceptSubElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe4d3071a, 0xc375, 0x4661, 0xa7, 0x72, 0xe6, 0xc0, 0xb0, 0xc7, 0x17, 0xcf);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RelationshipReferencesRightConceptSubElement link in the same Partition as the given Relationship
		/// </summary>
		/// <param name="source">Relationship to use as the source of the relationship.</param>
		/// <param name="target">ConceptSubElement to use as the target of the relationship.</param>
		public RelationshipReferencesRightConceptSubElement(Relationship source, ConceptSubElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RelationshipReferencesRightConceptSubElement.RelationshipDomainRoleId, source), new DslModeling::RoleAssignment(RelationshipReferencesRightConceptSubElement.ConceptSubElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipReferencesRightConceptSubElement(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipReferencesRightConceptSubElement(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelationshipReferencesRightConceptSubElement(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelationshipReferencesRightConceptSubElement(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Relationship domain role code
		
		/// <summary>
		/// Relationship domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelationshipDomainRoleId = new global::System.Guid(0x1c1b4e46, 0xf10a, 0x47c8, 0xb8, 0x18, 0x18, 0xe0, 0x79, 0xd4, 0xb6, 0x15);
		
		/// <summary>
		/// DomainRole Relationship
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement.Relationship
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement/Relationship.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement/Relationship.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RightConceptSubElement", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement/Relationship.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1c1b4e46-f10a-47c8-b818-18e079d4b615")]
		public virtual Relationship Relationship
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relationship)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelationshipDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelationshipDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access LeftRelationships of a ConceptSubElement
		/// <summary>
		/// Gets a list of LeftRelationships.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relationship> GetLeftRelationships(ConceptSubElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relationship>, Relationship>(element, ConceptSubElementDomainRoleId);
		}
		#endregion
		#region ConceptSubElement domain role code
		
		/// <summary>
		/// ConceptSubElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConceptSubElementDomainRoleId = new global::System.Guid(0xb9db7f46, 0xb580, 0x432d, 0x84, 0x05, 0x89, 0xf3, 0xcc, 0x13, 0x22, 0xb8);
		
		/// <summary>
		/// DomainRole ConceptSubElement
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement.ConceptSubElement
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement/ConceptSubElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement/ConceptSubElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "LeftRelationships", PropertyDisplayNameKey="Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement/ConceptSubElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b9db7f46-b580-432d-8405-89f3cc1322b8")]
		public virtual ConceptSubElement ConceptSubElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConceptSubElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConceptSubElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConceptSubElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RightConceptSubElement of a Relationship
		/// <summary>
		/// Gets RightConceptSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConceptSubElement GetRightConceptSubElement(Relationship element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelationshipDomainRoleId) as ConceptSubElement;
		}
		
		/// <summary>
		/// Sets RightConceptSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRightConceptSubElement(Relationship element, ConceptSubElement newConceptSubElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelationshipDomainRoleId, newConceptSubElement);
		}
		#endregion
		#region Relationship link accessor
		/// <summary>
		/// Get the RelationshipReferencesRightConceptSubElement link to a Relationship.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement GetLinkToRightConceptSubElement (global::Bb.ApplicationCooperationViewPoint.Relationship relationshipInstance)
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement>(relationshipInstance, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement.RelationshipDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relationship not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConceptSubElement link accessor
		/// <summary>
		/// Get the list of RelationshipReferencesRightConceptSubElement links to a ConceptSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement> GetLinksToLeftRelationships ( global::Bb.ApplicationCooperationViewPoint.ConceptSubElement conceptSubElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement>(conceptSubElementInstance, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement.ConceptSubElementDomainRoleId);
		}
		#endregion
		#region RelationshipReferencesRightConceptSubElement instance accessors
		
		/// <summary>
		/// Get any RelationshipReferencesRightConceptSubElement links between a given Relationship and a ConceptSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement> GetLinks( global::Bb.ApplicationCooperationViewPoint.Relationship source, global::Bb.ApplicationCooperationViewPoint.ConceptSubElement target )
		{
			global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement> outLinks = new global::System.Collections.Generic.List<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement>();
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement>(source, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement.RelationshipDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement link in links )
			{
				if ( target.Equals(link.ConceptSubElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RelationshipReferencesRightConceptSubElement link between a given Relationshipand a ConceptSubElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement GetLink( global::Bb.ApplicationCooperationViewPoint.Relationship source, global::Bb.ApplicationCooperationViewPoint.ConceptSubElement target )
		{
			global::System.Collections.Generic.IList<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement>(source, global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement.RelationshipDomainRoleId);
			foreach ( global::Bb.ApplicationCooperationViewPoint.RelationshipReferencesRightConceptSubElement link in links )
			{
				if ( target.Equals(link.ConceptSubElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
