//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainClass CooperationModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.CooperationModel.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.CooperationModel.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8be8ba93-37bd-430f-bab0-798cd8f43104")]
	public partial class CooperationModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CooperationModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8be8ba93, 0x37bd, 0x430f, 0xba, 0xb0, 0x79, 0x8c, 0xd8, 0xf4, 0x31, 0x04);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CooperationModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CooperationModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x048aa5a8, 0x8536, 0x4484, 0x83, 0x6c, 0x77, 0x92, 0xc8, 0xe9, 0x2d, 0x57);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description de Bb.ApplicationCooperationViewPoint.CooperationModel.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.CooperationModel/Name.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.CooperationModel/Name.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("048aa5a8-8536-4484-836c-7792c8e92d57")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CooperationModel.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<CooperationModel, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CooperationModel.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CooperationModel.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CooperationModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CooperationModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Target domain property code
		
		/// <summary>
		/// Target domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainPropertyId = new global::System.Guid(0xb963122b, 0x9189, 0x4127, 0xba, 0x26, 0x23, 0x29, 0x66, 0x61, 0xbb, 0xa4);
		
		/// <summary>
		/// Storage for Target
		/// </summary>
		private global::System.String targetPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Target domain property.
		/// Description de Bb.ApplicationCooperationViewPoint.CooperationModel.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.CooperationModel/Target.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.CooperationModel/Target.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b963122b-9189-4127-ba26-23296661bba4")]
		public global::System.String Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CooperationModel.Target domain property.
		/// </summary>
		internal sealed partial class TargetPropertyHandler : DslModeling::DomainPropertyValueHandler<CooperationModel, global::System.String>
		{
			private TargetPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CooperationModel.Target domain property value handler.
			/// </summary>
			public static readonly TargetPropertyHandler Instance = new TargetPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CooperationModel.Target domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CooperationModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CooperationModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xa44053d4, 0x9afc, 0x469a, 0xa7, 0xb3, 0x83, 0xd4, 0xe0, 0x0f, 0xa1, 0x6f);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description de Bb.ApplicationCooperationViewPoint.CooperationModel.Type
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.CooperationModel/Type.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.CooperationModel/Type.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a44053d4-9afc-469a-a7b3-83d4e00fa16f")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CooperationModel.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<CooperationModel, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CooperationModel.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CooperationModel.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CooperationModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CooperationModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CooperationElement> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CooperationElement>, CooperationElement>(global::Bb.ApplicationCooperationViewPoint.CooperationModelHasElements.CooperationModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Bb.ApplicationCooperationViewPoint.CooperationElement.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Bb.ApplicationCooperationViewPoint.CooperationElement sourceCooperationElement1 = sourceElement as global::Bb.ApplicationCooperationViewPoint.CooperationElement;
			if (sourceCooperationElement1 != null)
			{
				// Create link for path CooperationModelHasElements.Elements
				this.Elements.Add(sourceCooperationElement1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Bb.ApplicationCooperationViewPoint.CooperationElement sourceCooperationElement1 = sourceElement as global::Bb.ApplicationCooperationViewPoint.CooperationElement;
			if (sourceCooperationElement1 != null)
			{
				// Delete link for path CooperationModelHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::Bb.ApplicationCooperationViewPoint.CooperationModelHasElements.GetLinks((global::Bb.ApplicationCooperationViewPoint.CooperationModel)this, sourceCooperationElement1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Bb.ApplicationCooperationViewPoint.CooperationModelHasElements.CooperationModelDomainRoleId, global::Bb.ApplicationCooperationViewPoint.CooperationModelHasElements.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainClass CooperationElement
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.CooperationElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.CooperationElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (SourceReference = {sourceReferencePropertyStorage})")]
	[DslModeling::DomainObjectId("403a7c63-3a36-4881-b0d5-0eaf0dcad50e")]
	public partial class CooperationElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CooperationElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x403a7c63, 0x3a36, 0x4881, 0xb0, 0xd5, 0x0e, 0xaf, 0x0d, 0xca, 0xd5, 0x0e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CooperationElement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CooperationElement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SourceReference domain property code
		
		/// <summary>
		/// SourceReference domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceReferenceDomainPropertyId = new global::System.Guid(0x97022f17, 0xf153, 0x4a51, 0x90, 0x2e, 0xc1, 0x88, 0x6c, 0x9a, 0x53, 0x3a);
		
		/// <summary>
		/// Storage for SourceReference
		/// </summary>
		private global::System.String sourceReferencePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceReference domain property.
		/// Description for Bb.ApplicationCooperationViewPoint.ExampleElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.CooperationElement/SourceReference.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.CooperationElement/SourceReference.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("97022f17-f153-4a51-902e-c1886c9a533a")]
		public global::System.String SourceReference
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceReferencePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceReferencePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CooperationElement.SourceReference domain property.
		/// </summary>
		internal sealed partial class SourceReferencePropertyHandler : DslModeling::DomainPropertyValueHandler<CooperationElement, global::System.String>
		{
			private SourceReferencePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CooperationElement.SourceReference domain property value handler.
			/// </summary>
			public static readonly SourceReferencePropertyHandler Instance = new SourceReferencePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CooperationElement.SourceReference domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceReferenceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CooperationElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceReferencePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CooperationElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceReferencePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CooperationModel opposite domain role accessor
		/// <summary>
		/// Gets or sets CooperationModel.
		/// </summary>
		public virtual CooperationModel CooperationModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Bb.ApplicationCooperationViewPoint.CooperationModelHasElements.ElementDomainRoleId) as CooperationModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Bb.ApplicationCooperationViewPoint.CooperationModelHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// Description for Bb.ApplicationCooperationViewPoint.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CooperationElement> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CooperationElement>, CooperationElement>(global::Bb.ApplicationCooperationViewPoint.CooperationElementReferencesTargets.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// Description for Bb.ApplicationCooperationViewPoint.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CooperationElement> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CooperationElement>, CooperationElement>(global::Bb.ApplicationCooperationViewPoint.CooperationElementReferencesTargets.TargetDomainRoleId);
			}
		}
		#endregion
		#region CooperationSubElement opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CooperationSubElement.
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.CooperationElementHasCooperationSubElement.Parent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CooperationSubElement> CooperationSubElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CooperationSubElement>, CooperationSubElement>(global::Bb.ApplicationCooperationViewPoint.CooperationElementHasCooperationSubElement.ParentDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Bb.ApplicationCooperationViewPoint.CooperationSubElement.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Bb.ApplicationCooperationViewPoint.CooperationSubElement sourceCooperationSubElement1 = sourceElement as global::Bb.ApplicationCooperationViewPoint.CooperationSubElement;
			if (sourceCooperationSubElement1 != null)
			{
				// Create link for path CooperationElementHasCooperationSubElement.CooperationSubElement
				this.CooperationSubElement.Add(sourceCooperationSubElement1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Bb.ApplicationCooperationViewPoint.CooperationSubElement sourceCooperationSubElement1 = sourceElement as global::Bb.ApplicationCooperationViewPoint.CooperationSubElement;
			if (sourceCooperationSubElement1 != null)
			{
				// Delete link for path CooperationElementHasCooperationSubElement.CooperationSubElement
				
				foreach (DslModeling::ElementLink link in global::Bb.ApplicationCooperationViewPoint.CooperationElementHasCooperationSubElement.GetLinks((global::Bb.ApplicationCooperationViewPoint.CooperationElement)this, sourceCooperationSubElement1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Bb.ApplicationCooperationViewPoint.CooperationElementHasCooperationSubElement.ParentDomainRoleId, global::Bb.ApplicationCooperationViewPoint.CooperationElementHasCooperationSubElement.CooperationSubElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Bb.ApplicationCooperationViewPoint
{
	/// <summary>
	/// DomainClass CooperationSubElement
	/// Description de Bb.ApplicationCooperationViewPoint.CooperationSubElement
	/// </summary>
	[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.CooperationSubElement.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.CooperationSubElement.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e39ae37f-7927-4be7-a99c-94d0deb846f7")]
	public partial class CooperationSubElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CooperationSubElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe39ae37f, 0x7927, 0x4be7, 0xa9, 0x9c, 0x94, 0xd0, 0xde, 0xb8, 0x46, 0xf7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CooperationSubElement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CooperationSubElement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ReferenceSource domain property code
		
		/// <summary>
		/// ReferenceSource domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceSourceDomainPropertyId = new global::System.Guid(0xb3968e18, 0x782b, 0x4443, 0x99, 0x94, 0xf2, 0x32, 0x73, 0x92, 0x17, 0xb9);
		
		/// <summary>
		/// Storage for ReferenceSource
		/// </summary>
		private global::System.String referenceSourcePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ReferenceSource domain property.
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.CooperationSubElement.Reference Source
		/// </summary>
		[DslDesign::DisplayNameResource("Bb.ApplicationCooperationViewPoint.CooperationSubElement/ReferenceSource.DisplayName", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Bb.ApplicationCooperationViewPoint.CooperationSubElement/ReferenceSource.Description", typeof(global::Bb.ApplicationCooperationViewPoint.ApplicationCooperationViewPointDomainModel), "Bb.ApplicationCooperationViewPoint.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b3968e18-782b-4443-9994-f232739217b9")]
		public global::System.String ReferenceSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return referenceSourcePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceSourcePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CooperationSubElement.ReferenceSource domain property.
		/// </summary>
		internal sealed partial class ReferenceSourcePropertyHandler : DslModeling::DomainPropertyValueHandler<CooperationSubElement, global::System.String>
		{
			private ReferenceSourcePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CooperationSubElement.ReferenceSource domain property value handler.
			/// </summary>
			public static readonly ReferenceSourcePropertyHandler Instance = new ReferenceSourcePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CooperationSubElement.ReferenceSource domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceSourceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CooperationSubElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.referenceSourcePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CooperationSubElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.referenceSourcePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Parent opposite domain role accessor
		/// <summary>
		/// Gets or sets Parent.
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.CooperationElementHasCooperationSubElement.CooperationSubElement
		/// </summary>
		public virtual CooperationElement Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Bb.ApplicationCooperationViewPoint.CooperationElementHasCooperationSubElement.CooperationSubElementDomainRoleId) as CooperationElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Bb.ApplicationCooperationViewPoint.CooperationElementHasCooperationSubElement.CooperationSubElementDomainRoleId, value);
			}
		}
		#endregion
		#region TargetCooperationSubElement opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetCooperationSubElement.
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.CooperationSubElementReferencesTargetCooperationSubElement.SourceCooperationSubElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CooperationSubElement> TargetCooperationSubElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CooperationSubElement>, CooperationSubElement>(global::Bb.ApplicationCooperationViewPoint.CooperationSubElementReferencesTargetCooperationSubElement.SourceCooperationSubElementDomainRoleId);
			}
		}
		#endregion
		#region SourceCooperationSubElement opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceCooperationSubElement.
		/// Description de
		/// Bb.ApplicationCooperationViewPoint.CooperationSubElementReferencesTargetCooperationSubElement.TargetCooperationSubElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CooperationSubElement> SourceCooperationSubElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CooperationSubElement>, CooperationSubElement>(global::Bb.ApplicationCooperationViewPoint.CooperationSubElementReferencesTargetCooperationSubElement.TargetCooperationSubElementDomainRoleId);
			}
		}
		#endregion
	}
}
